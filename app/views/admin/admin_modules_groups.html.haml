- #  View for displaying module teams
- #  Authors: Anton Minkov && Laney Deveson
- #  Date: 07/04/2021

- content_for :title, "Module Groups"

%input{id: "module_id", name: "module_id", type: "hidden", value: @module_id}

.container.body_whole_custom_transparent
  .container-fluid.bg_none.no_padding.bg_border.margin_bottom_small.bg_white
    - # Search and sort form
    = simple_form_for :search_form do |f|
      = f.input :form_module_id, :as => :hidden, :input_html => {:id => "form_module_id", :value => params[:module_id] }
      .container-fluid.bg_none.no_padding
        %img.search_logo{:src => "/images/search_logo.jpg", :alt => "Search Modules"}
      .container-fluid.bg_none.row.no_padding
        .container.col-xs-5.col-sm-4.no_padding_right
          = f.input :search_input, as: :string, label: false , required: false, input_html: {:value => @saved_input}
        .container.col-xs-3.col-sm-3.no_padding_left
          = f.button :submit, "Search", name:"search_button", class: "btn btn-primary agreement_buttons justify-content-center button_search_2 float_left", id:"submit_choice", "data-disable-with" => "Submitting.."
        .container.col-xs-5.col-sm-3.no_padding_left.no_padding_right.padding_right_small
          - if can? :manage, :admin_modules_groups_create
            - if @has_active_teams == false && @num_students_in_module > 0
              %a.button{:href => admin_modules_groups_create_path(:module_id => params[:module_id]), type: "button", name: "create_groups_button",  class: "btn btn-primary agreement_buttons justify-content-center button_add_module", id:"create_groups_button"}Create Teams
            - else
              %button{type: "button",  class: "btn btn-primary agreement_buttons justify-content-center button_add_module button_off"}Create Teams
        .container.col-xs-5.col-sm-2.no_padding_left.no_padding_right.padding_right_small
          %a.button{:href => admin_modules_preview_path(:module_id => params[:module_id]), type: "button", name: "go_back_button",  class: "btn btn-primary agreement_buttons justify-content-center button_go_back_2", id:"go_back_button"}Go Back
      .container-fluid.bg_none.row.no_padding.margin_bottom_small
        .form-group.col-md-3.margin_bottom_small.text_black
          = f.input :search_type, as: :select, collection: ['Default - A to Z', 'Team size - Low to High', 'Team size - High to Low', 'Topic - A to Z'], label: "Sort By:", include_blank: false, required: false, :selected => @selected_type, :input_html => {onchange: "this.form.submit()"}

  - # Generating accordion with all the teams in the module
  .container-fluid.bg_none.no_padding.bg_border.margin_bottom_small.bg_white.text_black
    %input{id: "num_of_teams", name: "num_of_teams", type: "hidden", value: @groups_for_module.length}
    - if @groups_for_module.length == 0
      .container.no_results
        %h.center_element.bigger.text_black No users/groups match your search
    - else
      - last_i = 0
      #accordion
        .card
          - for i in 1..@groups_for_module.length
            - true_i = 0
            - if i == @groups_for_module.length
              - true_i = 1
            - else
              - true_i = i + 1

            - problems = Problem.get_problems_for_team(@groups_for_module[i-1].id)
            - num_problems_id = "num_of_problems_" + i.to_s
            %input{id: "#{num_problems_id}", name: "#{num_problems_id}", type: "hidden", value: problems.length}
            - # Displaying Teams name, topic and size + problem alert
            #heading-1.card-header
              %h5.mb-0
                %a.uni_purple.collapsed#a_tag{"aria-controls" => "collapse-#{true_i}", "aria-expanded" => "false", "data-toggle" => "collapse", href: "#collapse-#{true_i}", role: "button"}
                  - if @groups_for_module[i-1].topic == "none"
                    - group_topic = ""
                  - else
                    - group_topic = "- " + @groups_for_module[i-1].topic
                  #{@groups_for_module[i-1].name} #{group_topic}

                  - # Check for unsolved and assigned problems
                  %p.float_right.margin_none
                    - red_encounter = false
                    - yellow_encounter = false
                    - for k in 0..(problems.length-1)
                      - if problems[k].status == "unsolved"
                        - red_encounter = true
                      - elsif problems[k].status == "assigned"
                        - yellow_encounter = true

                    - if red_encounter
                      %span.dot_red
                    - elsif yellow_encounter
                      %span.dot_yellow
                  
                    #{Team.get_current_team_size(@groups_for_module[i-1].id)}/#{@groups_for_module[i-1].size}
                  
            - # Generate team information - members, team page, problems
            #collapse-1.collapse{"aria-labelledby" => "heading-#{true_i}", "data-parent" => "#accordion"}
              .card-body.no_padding
                #accordion-1
                  .card-body
                    - if can? :manage, :admin_modules_groups_preview
                      %li
                        %a.uni_purple{ :href => admin_modules_groups_preview_path(module_id: params[:module_id], team_id: @groups_for_module[i-1].id), :title => "Preview" }
                          %strong
                            View Team Page
                      %hr.group_line
                    .container-fluid.bg_none.no_padding.margin_bottom_small.text_black.medium.margin_left
                      Team Members 
                      .container.col-xs-6.col-sm-3.no_padding_left.no_padding_right.padding_right_small.float_right.small
                        - if can? :manage, :admin_modules_groups_add
                          %a.button{:href => admin_modules_groups_add_path(module_id: params[:module_id], team_id: @groups_for_module[i-1].id), type: "button", name: "add_student_button",  class: "btn btn-primary agreement_buttons justify-content-center button_solve", id:"add_user_button", value: "add_student"}Add Student

                    - # Table of students in the current team   
                    .container-fluid.bg_none.bg_border.no_padding.margin_bottom_small
                      - current_team_users = Team.get_current_team_members(@groups_for_module[i-1].id)
                      - if current_team_users.length <= 0
                        .container.no_results
                          %h.center_element.bigger.text_black No students in the team
                      - else
                        .container-fluid.bg_none.overflow_style.scroll_down.no_padding.table_div
                          %table.table.table-hover.table-dark 
                            %tbody
                              %tr.medium
                                %th.black_text{:colspan => "1", :style => "width: 5%;"} #
                                %th.black_text{:colspan => "1", :style => "width: 30%;"} Name
                                %th.black_text.center_element{:colspan => "1", :style => "width: 10%;"} Username
                                %th.black_text.center_element{:colspan => "1", :style => "width: 20%;"} Email
                                %th.black_text.center_element{:colspan => "1", :style => "width: 15%;"} Last Login
                                %th.black_text.center_element{:colspan => "4", :style => "width: 20%;"} Action
                                - current_team_users.to_a.each_with_index do |user, index|
                                  - if user[:givenname] == nil  
                                    - user[:givenname] = ""
                                  - if user[:sn] == nil 
                                    - user[:sn] = ""
                                  - whole_name = user[:givenname] + " " + user[:sn]
                                  %tr.small.hover_color
                                    = form_tag admin_modules_groups_path(module_id: params['module_id']), :method => :post, :id => 'remove_student_form' do
                                      %input#user_remove_id{name: "student_remove_id", type: "hidden", value: user[:id]}
                                      %input#team_id{name: "team_id", type: "hidden", value: @groups_for_module[i-1].id}
                                      - last_login = user[:last_sign_in_at]
                                      - if last_login.nil?
                                        - last_login = ""
                                      - else
                                        - last_login = user[:last_sign_in_at].strftime("%d/%m/%Y")
                                      %td{:colspan => "1", :style => "width: 5%;"} #{index+1}
                                      %td{:colspan => "1", :style => "width: 30%;"} #{whole_name}
                                      %td.center_element{:colspan => "1", :style => "width: 10%;"} #{user[:username]}
                                      %td.center_element{:colspan => "1", :style => "width: 20%;"} #{user[:email]}
                                      %td.center_element{:colspan => "1", :style => "width: 15%;"} #{last_login}
                                      %td.center_element{:colspan => "1", :style => "width: 20%;"} 
                                        - if can? :manage, :admin_modules_groups_add
                                          %button{type: "submit", name: "remove_student_button",  class: "btn btn-primary action_buttons justify-content-center small", id:"remove_user_button", value: "remove_student"}Remove Student
                  
                    %hr.group_line

                    - # Display current group's problems and potential feedback
                    - if problems.length == 0
                      .container.no_results.bg_none
                        %h.center_element.medium.text_black No problems in this group
                      %hr.group_line
                    - else
                      - for z in 1..problems.length
                        - problem_dot_type = "no_dot"
                        - if problems[z-1].status == "unsolved"
                          - problem_dot_type = "red"
                        - elsif problems[z-1].status == "assigned"
                          - problem_dot_type = "yellow"
                        - elsif problems[z-1].status == "solved"
                          - problem_dot_type = "solved"                  
                        - if z == 1
                          %h5 Assign/Solve Problems
                        .card
                          
                          - # Display current problem's status
                          #heading-1-1.card-header.header_bad
                            %h5.mb-0
                              %a.uni_purple.collapsed{"aria-controls" => "collapse-#{true_i}-#{z}", "aria-expanded" => "false", "data-toggle" => "collapse", href: "#collapse-#{true_i}-#{z}", role: "button"}
                                - if problems[z-1].status != "assigned"
                                  - assigned = ""
                                - else
                                  - assigned = "- Assigned to " + User.get_first_last(problems[z-1].assigned_to)
                                Problem #{z} #{assigned}
                                - if problem_dot_type == "red"
                                  %span.dot_red.float_right
                                - elsif problem_dot_type == "yellow"
                                  %span.dot_yellow.float_right
                                - elsif problem_dot_type == "solved"
                                  %span.dot_green.float_right
                          
                          - # Display current problem's content
                          #collapse-1-1.collapse.collapse_bad{"aria-labelledby" => "heading-#{true_i}-#{z}", "data-parent" => "#accordion-#{true_i}"}
                            .card-body
                              - created_at = problems[z-1].created_at.strftime("%I:%M %p %d/%m/%Y")
                              - if problems[z-1].solved_on != nil
                                - solved_on = problems[z-1].solved_on.strftime("%I:%M %p %d/%m/%Y")
                              - else
                                - solved_on = ""
                              - if problems[z-1].solved_by != nil
                                - solved_by = User.get_first_last(problems[z-1].solved_by) + " - " + User.get_email(problems[z-1].solved_by)
                              - else
                                - solved_by = ""
                              - problem_created_by_name = User.get_first_last(problems[z-1].created_by)
                              - problem_created_by_email = User.get_email(problems[z-1].created_by)
                              %p Created by: #{problem_created_by_name} - #{problem_created_by_email}
                              %p Created on: #{created_at}
                              %p Solved by: #{solved_by}
                              %p Solved on: #{solved_on}
                              %hr.group_line
                              %p.margin_bottom_small
                                By #{problem_created_by_name} on #{problems[z-1].created_at.strftime("%I:%M %p %d/%m/%Y")}
                                %hr.special_line.margin_none.margin_bottom_small_override.entry-content
                              %p Note: #{problems[z-1].note}
                              %hr.group_line

                              - problem_notes = ProblemNote.get_notes_for_problem(problems[z-1].id)

                              - # Displaying current problem's notes
                              %div{id: "notes_id_#{i}_#{z}"}
                                - for t in 0...problem_notes.length
                                  - created_by = User.get_first_last(problem_notes[t].created_by)
                                  - created_at = problem_notes.first.created_at.strftime("%I:%M %p %d/%m/%Y")
                                  %p.margin_bottom_small
                                    By #{created_by} on #{created_at}
                                    %hr.special_line.margin_none.margin_bottom_small_override.entry-content
                                  %p Note: #{problem_notes[t].note}
                                  %hr.group_line

                              %input{id: "problem_id_#{i}_#{z}", name: "problem_id_#{i}_#{z}", type: "hidden", value: problems[z-1].id}
                              %input{id: "team_number_#{i}_#{z}", name: "team_number_#{i}_#{z}", type: "hidden", value: "#{i}"}
                              %input{id: "problem_number_#{i}_#{z}", name: "problem_number_#{i}_#{z}", type: "hidden", value: "#{z}"}
                              
                              %p.medium.text_black.margin_none Additional Note:
                              .form-group.margin_bottom_small_override
                                %textarea.form-control{rows: "3", name: "additional_note_#{i}_#{z}", id: "additional_note_#{i}_#{z}"}
                              = link_to "Add Note", admin_modules_groups_path(), id: "add_note_button_#{i}_#{z}", class: "add btn btn-primary button_topics medium"
                              %hr.group_line

                              - # Problem assign/solve form
                              = simple_form_for :problem_form do |f|
                                = f.input :form_module_id, :as => :hidden, :input_html => {:id => "form_module_id", :value => params[:module_id] }
                                = f.input :form_problem_id, :as => :hidden, :input_html => {:id => "form_problem_id", :value => problems[z-1].id }
                                .container-fluid.bg_none.row.no_padding.margin_bottom_small
                                  - if problems[z-1].status != "solved"
                                    - if can? :manage, :problems
                                      .container.col-xs-6.col-sm-3.no_padding.text_black
                                        = f.input :assign_list, as: :select, collection: @ta_and_mod_lead, label: false, include_blank: false, required: false
                                      .container.col-xs-6.col-sm-5
                                        = f.button :submit, "Assign", name:"assign_button", class: "btn btn-primary agreement_buttons justify-content-center button_assign float_left", id:"assign_button"
                                    - current_user_privilege = ListModule.privilege_for_module(current_user.username, params[:module_id])
                                    - if (current_user.username == problems[z-1].assigned_to || (can? :manage, :problems)) && problems[z-1].status != "solved"
                                      .container.col-xs-6.col-sm-4.no_padding_left.no_padding_right
                                        = f.button :submit, "Mark as solved", type: "submit", name: "solve_button",  class: "btn btn-primary agreement_buttons justify-content-center button_solve", id:"solve_button"

                        - # Changing id's to avoid duplication
                        - if i == @groups_for_module.length
                          - last_i = true_i
                          - last_z = z
                        - else
                          :javascript
                            document.getElementById('heading-1-1').id = 'heading-#{true_i}-#{z}';
                            document.getElementById('collapse-1-1').id = 'collapse-#{true_i}-#{z}';
            
            - # Changing id's to avoid duplication
            :javascript
              document.getElementById('heading-1').id = 'heading-#{i}';
              document.getElementById('collapse-1').id = 'collapse-#{i}';
              document.getElementById('accordion-1').id = 'accordion-#{i}';
      
      - # Changing id's to avoid duplication
      - last_team_id = @groups_for_module[@groups_for_module.length-1].id
      - last_problems = Problem.get_problems_for_team(last_team_id)
      - for y in 1..last_problems.length
        - index = @num_of_problems-(last_problems.length+1) + y 
        :javascript
          var bad_headers = document.getElementsByClassName("header_bad");
          var bad_collapsers = document.getElementsByClassName("collapse_bad");
          bad_headers['#{index}'].id = 'heading-#{last_i}-#{y}';
          bad_collapsers['#{index}'].id = 'collapse-#{last_i}-#{y}';

  .container-fluid.bg_none.row.no_padding.bg_none.margin_none
    .container.col-xs-12.col-sm-8.no_padding.padding_right_small.mb-1{id: "approve_button_div"}
      - if @all_teams_approved
        %button{type: "button", name: "approve_teams_button",  class: "btn btn-primary agreement_buttons justify-content-center button_go_back_2 button_off", id:"approve_teams_button"}Approve Teams
      - else
        %button{type: "button", name: "approve_teams_button",  class: "btn btn-primary agreement_buttons justify-content-center button_go_back_2", id:"approve_teams_button"}Approve Teams
    .container.col-xs-6.col-sm-4.no_padding
      - if ListModule.get_future_feedback_periods(params['module_id'], Time.now).length == 0 
        %a.button{class: "btn btn-primary agreement_buttons justify-content-center button_go_back_2 button_off"}Edit Feedback periods
      - else
        %a.button{:href => admin_modules_periods_edit_path(:module_id => params[:module_id]), type: "button", name: "edit_periods_button",  class: "btn btn-primary agreement_buttons justify-content-center button_go_back_2", id:"edit_periods_button"}Edit Feedback periods

:javascript
  add_note_function();
  approve_teams()